{"ast":null,"code":"var _jsxFileName = \"/Users/annamoser/Coding/react-language-learner/src/components/Card/Card.js\";\nimport React, { Component } from 'react';\nimport '../Card/Card.css';\nimport { sentences } from '../Sentences';\nimport Button from 'react-bootstrap/Button'; // *** Variable Declarations ***\n\nconst allData = sentences; // Get random keys from object - https://stackoverflow.com/questions/53334851/loop-through-object-and-get-random-item-in-javascript\n\nconst keys = Object.keys(sentences);\nconst alreadyDisplayed = keys[Math.floor(Math.random() * keys.length)];\nconst currentQ = allData[alreadyDisplayed];\nlet correctAnswer = allData[alreadyDisplayed].conjugatedVerb;\nconsole.log(\"Correct Answer:\", correctAnswer);\nconst choices = [allData[alreadyDisplayed].conjugatedVerb, allData[alreadyDisplayed].wrongAnswers[0], allData[alreadyDisplayed].wrongAnswers[1], allData[alreadyDisplayed].wrongAnswers[2]];\nlet shuffled = shuffle(choices);\nconst answerChoices = shuffled.map((choice, index) => ({\n  label: choice,\n  value: index\n}));\nconst infinitiveVerb = allData[alreadyDisplayed].infinitiveVerb; //How to shuffle using Fisher-Yates Shuffle: https://bost.ocks.org/mike/shuffle/\n\nfunction shuffle(choices) {\n  var m = choices.length,\n      t,\n      i; // While there remain elements to shuffle…\n\n  while (m) {\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--); // And swap it with the current element.\n\n    t = choices[m];\n    choices[m] = choices[i];\n    choices[i] = t;\n  }\n\n  return choices;\n}\n\nshuffle(choices);\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answeredCorrectly: ''\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.currentQWithBlank();\n  }\n\n  handleClick(id) {\n    console.log(\"You pressed\", answerChoices[id].label);\n\n    if (answerChoices[id].label !== correctAnswer) {\n      this.setState({\n        answeredCorrectly: 'false'\n      });\n      return console.log(\"You are wrong.\");\n    } else if (answerChoices[id].label === correctAnswer) {\n      this.setState({\n        answeredCorrectly: 'true'\n      });\n      return console.log(\"You are right.\");\n    }\n  }\n\n  refresh() {\n    setTimeout(function () {\n      this.location.reload();\n    }, 0);\n  } // *** Display Spanish Question Sentence with Blank ***\n\n\n  currentQWithBlank() {\n    let arr = currentQ.es.split(\" \");\n    let lengthArr = arr.length;\n    let i = 0;\n\n    for (i >= 0; i < lengthArr; i++) {\n      if (arr[i].toLowerCase() === currentQ.conjugatedVerb) {\n        let convertToStr = arr[i].toString();\n        let replaceWithBlank = currentQ.es.replace(convertToStr, \"______\");\n        return replaceWithBlank;\n      }\n    }\n  } // *** End of Display of Spanish Question Sentence with Blank ***\n\n\n  render() {\n    if (this.state.answeredCorrectly === 'false') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"show-cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"question-es\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }\n      }, this.currentQWithBlank()), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"question-en\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }\n      }, currentQ.en), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answer-space\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"incorrect\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }\n      }, \"Incorrect! The right answer is \", /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 86\n        }\n      }, /*#__PURE__*/React.createElement(\"u\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 89\n        }\n      }, correctAnswer)), \". \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 117\n        }\n      }), /*#__PURE__*/React.createElement(\"a\", {\n        href: `https://www.spanishdict.com/conjugate/${infinitiveVerb}`,\n        target: \"_blank\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 126\n        }\n      }, /*#__PURE__*/React.createElement(\"u\", {\n        style: {\n          color: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 210\n        }\n      }, \"Review here\")), \".\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 260\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        className: \"next-button\",\n        onClick: this.refresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }\n      }, \"Next Question\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }\n      }, answerChoices.map((_obj, id) => /*#__PURE__*/React.createElement(Button, {\n        key: Math.random(),\n        id: id,\n        className: \"choice-button\",\n        onClick: () => this.handleClick(id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 33\n        }\n      }, answerChoices[id].label)))));\n    } else if (this.state.answeredCorrectly === 'true') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"show-cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"question-es\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }\n      }, currentQ.es), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"question-en\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, currentQ.en), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answer-space\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"correct\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 49\n        }\n      }, \"\\uD83C\\uDF1F\"), \" Correct! Muy bien! \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 84\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        className: \"next-button\",\n        onClick: this.refresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }\n      }, \"Next Question\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }\n      }, answerChoices.map((_obj, id) => /*#__PURE__*/React.createElement(Button, {\n        key: Math.random(),\n        id: id,\n        className: \"choice-button\",\n        onClick: () => this.handleClick(id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }\n      }, answerChoices[id].label)))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"show-cards\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"question-es\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }, this.currentQWithBlank()), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"question-en\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }\n      }, currentQ.en), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answer-space\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }\n      }, answerChoices.map((_obj, id) => /*#__PURE__*/React.createElement(Button, {\n        key: Math.random(),\n        id: id,\n        className: \"choice-button\",\n        onClick: () => this.handleClick(id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }\n      }, answerChoices[id].label)))));\n    }\n  }\n\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/annamoser/Coding/react-language-learner/src/components/Card/Card.js"],"names":["React","Component","sentences","Button","allData","keys","Object","alreadyDisplayed","Math","floor","random","length","currentQ","correctAnswer","conjugatedVerb","console","log","choices","wrongAnswers","shuffled","shuffle","answerChoices","map","choice","index","label","value","infinitiveVerb","m","t","i","Card","constructor","props","state","answeredCorrectly","handleClick","bind","componentDidMount","currentQWithBlank","id","setState","refresh","setTimeout","location","reload","arr","es","split","lengthArr","toLowerCase","convertToStr","toString","replaceWithBlank","replace","render","en","color","_obj"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport '../Card/Card.css'\nimport { sentences } from '../Sentences'\nimport Button from 'react-bootstrap/Button';\n\n// *** Variable Declarations ***\nconst allData = sentences\n// Get random keys from object - https://stackoverflow.com/questions/53334851/loop-through-object-and-get-random-item-in-javascript\nconst keys = Object.keys(sentences);\nconst alreadyDisplayed = keys[Math.floor(Math.random() * keys.length)];\nconst currentQ = allData[alreadyDisplayed];\nlet correctAnswer = allData[alreadyDisplayed].conjugatedVerb\nconsole.log(\"Correct Answer:\", correctAnswer);\nconst choices = [allData[alreadyDisplayed].conjugatedVerb, allData[alreadyDisplayed].wrongAnswers[0], allData[alreadyDisplayed].wrongAnswers[1], allData[alreadyDisplayed].wrongAnswers[2]];\n\nlet shuffled = shuffle(choices)\nconst answerChoices = shuffled.map((choice, index) => ({\n    label: choice,\n    value: index,\n}))\n\nconst infinitiveVerb = allData[alreadyDisplayed].infinitiveVerb\n\n//How to shuffle using Fisher-Yates Shuffle: https://bost.ocks.org/mike/shuffle/\nfunction shuffle(choices) {\n    var m = choices.length, t, i;\n    // While there remain elements to shuffle…\n    while (m) {\n        // Pick a remaining element…\n        i = Math.floor(Math.random() * m--);\n        // And swap it with the current element.\n        t = choices[m];\n        choices[m] = choices[i];\n        choices[i] = t;\n    }\n    return choices;\n}\nshuffle(choices)\n\n\nclass Card extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            answeredCorrectly: '',\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.currentQWithBlank()\n    }\n\n    handleClick(id) {\n        console.log(\"You pressed\", answerChoices[id].label)\n\n        if (answerChoices[id].label !== correctAnswer) {\n            this.setState({\n                answeredCorrectly: 'false'\n            })\n            return console.log(\"You are wrong.\")\n        } else if (answerChoices[id].label === correctAnswer) {\n            this.setState({\n                answeredCorrectly: 'true'\n            })\n            return console.log(\"You are right.\")\n        }\n    };\n\n    refresh() {\n        setTimeout(function () { this.location.reload() }, 0)\n    }\n\n    // *** Display Spanish Question Sentence with Blank ***\n    currentQWithBlank() {\n        let arr = currentQ.es.split(\" \")\n        let lengthArr = arr.length;\n        let i = 0;\n\n        for (i >= 0; i < lengthArr; i++) {\n            if (arr[i].toLowerCase() === currentQ.conjugatedVerb) {\n                let convertToStr = arr[i].toString()\n                let replaceWithBlank = currentQ.es.replace(convertToStr, \"______\")\n                return replaceWithBlank;\n            }\n        }\n    }\n    // *** End of Display of Spanish Question Sentence with Blank ***\n\n\n    render() {\n\n        if (this.state.answeredCorrectly === 'false') {\n            return (\n                <div className=\"card-container\">\n                    <div className=\"show-cards\">\n\n                        <h4 className=\"question-es\">{this.currentQWithBlank()}</h4>\n                        <p className=\"question-en\">{currentQ.en}</p>\n                        <div className=\"answer-space\">\n                            <h4 className=\"incorrect\">Incorrect! The right answer is <i><u>{correctAnswer}</u></i>. <br></br><a href={`https://www.spanishdict.com/conjugate/${infinitiveVerb}`} target=\"_blank\"><u style={{ color: \"white\" }}>Review here</u></a>.<br></br>\n                            <Button\n                                    className=\"next-button\"\n                                    onClick={this.refresh}\n                                >\n                                    Next Question\n                        </Button>\n                            </h4>\n                        </div>\n\n                        <div>\n                            {answerChoices.map((_obj, id) => (\n                                <Button\n                                    key={Math.random()}\n                                    id={id}\n                                    className=\"choice-button\"\n                                    onClick={() => this.handleClick(id)}>{answerChoices[id].label}\n                                </Button>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            )\n        } else if (this.state.answeredCorrectly === 'true') {\n            return (<div className=\"card-container\">\n                <div className=\"show-cards\">\n\n                    <h4 className=\"question-es\">{currentQ.es}</h4>\n                    <p className=\"question-en\">{currentQ.en}</p>\n                    <div className=\"answer-space\">\n                        <h4 className=\"correct\"><span>🌟</span> Correct! Muy bien! <br></br>\n                            <Button\n                                className=\"next-button\"\n                                onClick={this.refresh}\n                            >\n                                Next Question\n                        </Button>\n                        </h4>\n                    </div>\n\n                    <div>\n                        {answerChoices.map((_obj, id) => (\n                            <Button\n                                key={Math.random()}\n                                id={id}\n                                className=\"choice-button\"\n                                onClick={() => this.handleClick(id)}>{answerChoices[id].label}\n                            </Button>\n\n                        ))}\n\n                    </div>\n\n                </div>\n            </div>)\n        } else {\n            return (<div className=\"card-container\">\n                <div className=\"show-cards\">\n\n                    <h4 className=\"question-es\">{this.currentQWithBlank()}</h4>\n                    <p className=\"question-en\">{currentQ.en}</p>\n                    <div className=\"answer-space\"></div>\n                    <div>\n                        {answerChoices.map((_obj, id) => (\n                            <Button\n                                key={Math.random()}\n                                id={id}\n                                className=\"choice-button\"\n                                onClick={() => this.handleClick(id)}>{answerChoices[id].label}\n                            </Button>\n                        ))}\n\n                    </div>\n                </div>\n            </div>)\n        }\n\n    }\n}\n\nexport default Card;\n\n\n"]},"metadata":{},"sourceType":"module"}